<UserControl
    x:Class="TextEditor.Views.SidebarView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:models="clr-namespace:TextEditor.Models"
    xmlns:viewModels="clr-namespace:TextEditor.ViewModels"
    Width="NaN"
    Height="NaN"
    d:DataContext="{d:DesignInstance Type=viewModels:SidebarViewModel}"
    d:DesignHeight="500"
    d:DesignWidth="350"
    mc:Ignorable="d">
    <UserControl.DataContext>
        <viewModels:SidebarViewModel />
    </UserControl.DataContext>
    <UserControl.Resources>
        <Style
            x:Key="TreeViewWrappingFix"
            BasedOn="{StaticResource {x:Type TreeView}}"
            TargetType="TreeView">
            <Style.Resources>
                <Style TargetType="{x:Type TreeViewItem}">
                    <Style.Triggers>
                        <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
                            <Setter Property="ItemsControl.ItemsPanel">
                                <Setter.Value>
                                    <ItemsPanelTemplate>
                                        <VirtualizingStackPanel IsItemsHost="True" />
                                    </ItemsPanelTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </Style.Triggers>
                    <Setter Property="Panel.Background" Value="#00FFFFFF" />
                    <Setter Property="Control.HorizontalContentAlignment">
                        <Setter.Value>
                            <Binding Path="HorizontalContentAlignment" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ItemsControl, AncestorLevel=1}" />
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Control.VerticalContentAlignment">
                        <Setter.Value>
                            <Binding Path="VerticalContentAlignment" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ItemsControl, AncestorLevel=1}" />
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Control.Padding" Value="1,0,0,0" />
                    <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                    <Setter Property="FrameworkElement.FocusVisualStyle">
                        <Setter.Value>
                            <Style TargetType="{x:Type IFrameworkInputElement}">
                                <Setter Property="Control.Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <Rectangle />
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TreeViewItem}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" MinWidth="19" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <ToggleButton
                                        Name="Expander"
                                        ClickMode="Press"
                                        IsChecked="False">
                                        <ToggleButton.Style>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="UIElement.Focusable" Value="False" />
                                                <Setter Property="FrameworkElement.Width" Value="16" />
                                                <Setter Property="FrameworkElement.Height" Value="16" />
                                                <Setter Property="Control.Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border
                                                                Width="16"
                                                                Height="16"
                                                                Padding="5"
                                                                Background="#00FFFFFF">
                                                                <Path
                                                                    Name="ExpandPath"
                                                                    Fill="#FFFFFF"
                                                                    Stroke="#FF818181">
                                                                    <Path.Data>
                                                                        <PathGeometry Figures="M0,0L0,6L6,0z" />
                                                                    </Path.Data>
                                                                    <Path.RenderTransform>
                                                                        <RotateTransform Angle="135" CenterX="3" CenterY="3" />
                                                                    </Path.RenderTransform>
                                                                </Path>
                                                            </Border>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="ToggleButton.IsChecked" Value="True">
                                                                    <Setter TargetName="ExpandPath" Property="UIElement.RenderTransform">
                                                                        <Setter.Value>
                                                                            <RotateTransform Angle="180" CenterX="3" CenterY="3" />
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                    <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="#595959" />
                                                                    <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="#262626" />
                                                                </Trigger>
                                                                <Trigger Property="UIElement.IsMouseOver" Value="True">
                                                                    <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="#27C7F7" />
                                                                    <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="#CCEEFB" />
                                                                </Trigger>
                                                                <MultiTrigger>
                                                                    <MultiTrigger.Conditions>
                                                                        <Condition Property="UIElement.IsMouseOver" Value="True" />
                                                                        <Condition Property="ToggleButton.IsChecked" Value="True" />
                                                                    </MultiTrigger.Conditions>
                                                                    <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="#1CC4F7" />
                                                                    <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="#82DFFB" />
                                                                </MultiTrigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ToggleButton.Style>
                                    </ToggleButton>
                                    <Border
                                        Name="Bd"
                                        Grid.Row="0"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="2"
                                        Padding="{TemplateBinding Control.Padding}"
                                        Background="{TemplateBinding Panel.Background}"
                                        BorderBrush="{TemplateBinding Border.BorderBrush}"
                                        BorderThickness="{TemplateBinding Border.BorderThickness}"
                                        SnapsToDevicePixels="True">
                                        <ContentPresenter
                                            Name="PART_Header"
                                            HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                            Content="{TemplateBinding HeaderedContentControl.Header}"
                                            ContentSource="Header"
                                            ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                            ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                                    </Border>
                                    <ItemsPresenter
                                        Name="ItemsHost"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="2" />
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="TreeViewItem.IsExpanded" Value="False">
                                        <Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed" />
                                    </Trigger>
                                    <Trigger Property="ItemsControl.HasItems" Value="False">
                                        <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden" />
                                    </Trigger>
                                    <Trigger Property="TreeViewItem.IsSelected" Value="True">
                                        <Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                                    </Trigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="TreeViewItem.IsSelected" Value="True" />
                                            <Condition Property="Selector.IsSelectionActive" Value="False" />
                                        </MultiTrigger.Conditions>
                                        <Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                                        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" />
                                    </MultiTrigger>
                                    <Trigger Property="UIElement.IsEnabled" Value="False">
                                        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Style.Resources>
        </Style>

        <HierarchicalDataTemplate DataType="{x:Type models:DirectoryItem}" ItemsSource="{Binding Items}">
            <TextBlock Text="{Binding Path=Name}" ToolTip="{Binding Path=Path}" />
        </HierarchicalDataTemplate>

        <DataTemplate DataType="{x:Type models:FileItem}">
            <TextBlock Text="{Binding Path=Name}" ToolTip="{Binding Path=Path}" />
        </DataTemplate>

    </UserControl.Resources>
    <Grid Margin="8">
        <TreeView
            x:Name="TreeViewControl"
            ItemsSource="{Binding Files}"
            ScrollViewer.HorizontalScrollBarVisibility="Disabled"
            Style="{StaticResource TreeViewWrappingFix}">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="SelectedItemChanged">
                    <i:InvokeCommandAction Command="{Binding SelectedItemChangedCommand}" CommandParameter="{Binding ElementName=TreeViewControl, Path=SelectedItem}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </TreeView>
    </Grid>
</UserControl>